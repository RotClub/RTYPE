---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by yamo.
--- DateTime: 17/12/2024 11:54
---

local function check_index(symbol_name, symbol_function)
    if symbol_name == '__index' then
        print("INSIDE __index")
        for a, b in pairs(symbol_function) do
            print(a, b)
            check_index(a, b)
        end
        print("END INSIDE __index")
    end
end

local function printMetatable(node)
    print(node.__name)
    for k, j in pairs(getmetatable(node).__index) do
        print(k, j)
        check_index(k, j)
    end
end

local function updateNodes(node)
    for _, v in ipairs(node:GetChildren()) do
        v:Update()
        updateNodes(v)
    end
end

root:CreateChild("Node2D", "node_two")
root:CreateChild("Sprite2D", "iamasprite", "image.png")

print("\nPRINTING ROOT")
print(root.__name, root:GetName())
for k, j in pairs(getmetatable(root).__index) do
    print(k, j)
    check_index(k, j)
end
print("END PRINTING ROOT \n")

print("PRINTING CHILDREN")

for _, v in ipairs(root:GetChildren()) do
    printMetatable(v)
    print("----------")
end
print("END PRINTING CHILDREN\n")

-- Add a child Node
local node = root:CreateChild("Node", "node1")

---- Directly call NodeMetaTable methods
print("Should be node1 -> ", node:GetName())  -- Works as expected (prints "node1")
node:SetName("new_name")
print("Should be new_name -> ", node:GetName())  -- Works as expected (prints "new_name")

---- Add a Node2D child
local sprite = root:CreateChild("Node2D", "sprite")

-- Directly call Node2DMetaTable methods
print("Should be 0, 0 -> ", sprite:GetPosition())  -- Works as expected (prints 0, 0)
sprite:SetPosition(100, 200)
print("Should be 100, 200 -> ", sprite:GetPosition(), "\n")  -- Works as expected (prints 100, 200)

-- Add a child CollisionShape2D
local rect_shape = root:CreateChild("CollisionShape2D", "rect", "Rectangle", 0, 0, 100, 100)

-- Directly call CollisionShape2DMetaTable methods
print("Should be 0, 0, 100, 100 -> ", rect_shape:GetBoundingBox())
print("Should be true -> ", rect_shape:IsCollisionEnabled())
rect_shape:ToggleCollision()
print("Should be false -> ", rect_shape:IsCollisionEnabled())
rect_shape:ToggleCollision()

print("Testing for collisions")

-- Add a child CollisionShape2D
local rect1_shape = root:CreateChild("CollisionShape2D", "rect1", "Rectangle", 1, 1, 50, 50)

-- Directly call CollisionShape2DMetaTable methods
print("Should be true -> ", rect1_shape:Collide(rect_shape))

-- Add a child CollisionShape2D
local rect2_shape = root:CreateChild("CollisionShape2D", "rect2", "Rectangle", 200, 200, 10, 10)

-- Directly call CollisionShape2DMetaTable methods
print("Should be false -> ", rect2_shape:Collide(rect_shape))

-- Area2D
local area2d = root:CreateChild("Area2D", "area" , 0, 0, 100, 100)
print("Area2D position should be 0, 0 -> ", area2d:GetPosition())
print("Area2D size should be 100, 100 -> ", area2d:GetSize())
local area2d2 = root:CreateChild("Area2D", "area2" , 120, 120, 30, 30)
--updateNodes(root)
print("Should be false -> ", area2d:Collide(area2d2))
area2d:SetPosition(80, 80)
print("Area2D position should be 80, 80 -> ", area2d:GetPosition())
--updateNodes(root)
print("Area2D Pos : ", area2d:GetPosition())
print("Area2D Size : ", area2d:GetSize())
print("Area2D2 Pos : ", area2d2:GetPosition())
print("Area2D2 Size : ", area2d2:GetSize())
print("Should be true -> ", area2d:Collide(area2d2))

-- Rigidbody2D
local rb2d = root:CreateChild("RigidBody2D", "rb2d", 1, 0.5, 10, 50)
print("Rigidbody2D position should be 1, 0.5 -> ", rb2d:GetPosition())

for _ = 1, 10 do
    rb2d:Update()
    print("Rigidbody2D position are now ", rb2d:GetPosition())
end
